package com.github.panpf.zoomimage.core

import com.github.panpf.zoomimage.core.internal.format
import com.github.panpf.zoomimage.core.internal.lerp
import kotlin.math.roundToInt

data class Origin(
    val x: Float,
    val y: Float,
) {

    init {
        require(x in 0f..1f) { "x must be in the range [0, 1] but was $x" }
        require(y in 0f..1f) { "y must be in the range [0, 1] but was $y" }
    }

    fun isEmpty() = x == 0f && y == 0f

    /**
     * Multiplication operator.
     *
     * Returns a [Origin] with scale x and y values multiplied by the operand
     */
    operator fun times(operand: Float) = Origin(x * operand, y * operand)

    /**
     * Division operator.
     *
     * Returns a [Origin] with scale x and y values divided by the operand
     */
    operator fun div(operand: Float) = Origin(x / operand, y / operand)

    override fun toString() = "Origin(${x.format(2)}, ${y.format(2)}))"

    companion object {
        /**
         * An offset with zero magnitude.
         *
         * This can be used to represent the origin of a coordinate space.
         */
        val Zero = Origin(0f, 0f)
    }
}

/**
 * Multiplication operator with [IntSizeCompat].
 *
 * Return a new [IntSizeCompat] with the width and height multiplied by the [Origin.x] and
 * [Origin.y] respectively
 */
operator fun IntSizeCompat.times(scaleFactor: Origin): IntSizeCompat =
    IntSizeCompat(
        (this.width * scaleFactor.x).roundToInt(),
        (this.height * scaleFactor.y).roundToInt()
    )

/**
 * Multiplication operator with [IntSizeCompat] with reverse parameter types to maintain
 * commutative properties of multiplication
 *
 * Return a new [IntSizeCompat] with the width and height multiplied by the [Origin.x] and
 * [Origin.y] respectively
 */
operator fun Origin.times(size: IntSizeCompat): IntSizeCompat = size * this

/**
 * Division operator with [IntSizeCompat]
 *
 * Return a new [IntSizeCompat] with the width and height divided by [Origin.x] and
 * [Origin.y] respectively
 */
operator fun IntSizeCompat.div(scaleFactor: Origin): IntSizeCompat =
    IntSizeCompat((width / scaleFactor.x).roundToInt(), (height / scaleFactor.y).roundToInt())

/**
 * Linearly interpolate between two [Origin] parameters
 *
 * The [fraction] argument represents position on the timeline, with 0.0 meaning
 * that the interpolation has not started, returning [start] (or something
 * equivalent to [start]), 1.0 meaning that the interpolation has finished,
 * returning [stop] (or something equivalent to [stop]), and values in between
 * meaning that the interpolation is at the relevant point on the timeline
 * between [start] and [stop]. The interpolation can be extrapolated beyond 0.0 and
 * 1.0, so negative values and values greater than 1.0 are valid (and can
 * easily be generated by curves).
 *
 * Values for [fraction] are usually obtained from an [Animation<Float>], such as
 * an `AnimationController`.
 */
fun lerp(start: Origin, stop: Origin, fraction: Float): Origin {
    return Origin(
        lerp(start.x, stop.x, fraction),
        lerp(start.y, stop.y, fraction)
    )
}


fun Origin.toShortString(): String = "${x.format(2)}x${y.format(2)}"