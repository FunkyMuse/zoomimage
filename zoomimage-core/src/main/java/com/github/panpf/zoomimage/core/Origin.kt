package com.github.panpf.zoomimage.core

import com.github.panpf.zoomimage.core.internal.format
import com.github.panpf.zoomimage.core.internal.lerp
import kotlin.math.roundToInt

// todo 不再使用 Origin
data class Origin(val pivotFractionX: Float, val pivotFractionY: Float) {

    /**
     * Multiplication operator.
     *
     * Returns a [TopStart] with scale x and y values multiplied by the operand
     */
    operator fun times(operand: Float) = Origin(pivotFractionX * operand, pivotFractionY * operand)

    /**
     * Division operator.
     *
     * Returns a [TopStart] with scale x and y values divided by the operand
     */
    operator fun div(operand: Float) = Origin(pivotFractionX / operand, pivotFractionY / operand)

    override fun toString() = "Origin(${pivotFractionX.format(2)}, ${pivotFractionY.format(2)}))"

    companion object {
        val TopStart = Origin(pivotFractionX = 0f, pivotFractionY = 0f)
        val Center = Origin(pivotFractionX = 0.5f, pivotFractionY = 0.5f)
    }
}

/**
 * Multiplication operator with [IntSizeCompat].
 *
 * Return a new [IntSizeCompat] with the width and height multiplied by the [Origin.pivotFractionX] and
 * [Origin.pivotFractionY] respectively
 */
operator fun IntSizeCompat.times(origin: Origin): IntSizeCompat =
    IntSizeCompat(
        width = (this.width * origin.pivotFractionX).roundToInt(),
        height = (this.height * origin.pivotFractionY).roundToInt()
    )

/**
 * Multiplication operator with [IntSizeCompat] with reverse parameter types to maintain
 * commutative properties of multiplication
 *
 * Return a new [IntSizeCompat] with the width and height multiplied by the [Origin.pivotFractionX] and
 * [Origin.pivotFractionY] respectively
 */
operator fun Origin.times(size: IntSizeCompat): IntSizeCompat = size * this

/**
 * Division operator with [IntSizeCompat]
 *
 * Return a new [IntSizeCompat] with the width and height divided by [Origin.pivotFractionX] and
 * [Origin.pivotFractionY] respectively
 */
operator fun IntSizeCompat.div(origin: Origin): IntSizeCompat =
    IntSizeCompat(
        width = (width / origin.pivotFractionX).roundToInt(),
        height = (height / origin.pivotFractionY).roundToInt()
    )

/**
 * Linearly interpolate between two [Origin] parameters
 *
 * The [fraction] argument represents position on the timeline, with 0.0 meaning
 * that the interpolation has not started, returning [start] (or something
 * equivalent to [start]), 1.0 meaning that the interpolation has finished,
 * returning [stop] (or something equivalent to [stop]), and values in between
 * meaning that the interpolation is at the relevant point on the timeline
 * between [start] and [stop]. The interpolation can be extrapolated beyond 0.0 and
 * 1.0, so negative values and values greater than 1.0 are valid (and can
 * easily be generated by curves).
 *
 * Values for [fraction] are usually obtained from an [Animation<Float>], such as
 * an `AnimationController`.
 */
fun lerp(start: Origin, stop: Origin, fraction: Float): Origin {
    return Origin(
        pivotFractionX = lerp(start.pivotFractionX, stop.pivotFractionX, fraction),
        pivotFractionY = lerp(start.pivotFractionY, stop.pivotFractionY, fraction)
    )
}


fun Origin.toShortString(): String = "${pivotFractionX.format(2)}x${pivotFractionY.format(2)}"