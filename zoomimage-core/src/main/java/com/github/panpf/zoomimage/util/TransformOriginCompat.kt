package com.github.panpf.zoomimage.util

import com.github.panpf.zoomimage.util.internal.format
import com.github.panpf.zoomimage.util.internal.lerp
import com.github.panpf.zoomimage.util.internal.packFloats
import com.github.panpf.zoomimage.util.internal.unpackFloat1
import com.github.panpf.zoomimage.util.internal.unpackFloat2
import kotlin.math.roundToInt

/**
 * Constructs a [TransformOriginCompat] from the given fractional values from the Layer's
 * width and height
 */
fun TransformOriginCompat(pivotFractionX: Float, pivotFractionY: Float): TransformOriginCompat =
    TransformOriginCompat(packFloats(pivotFractionX, pivotFractionY))

/**
 * A two-dimensional position represented as a fraction of the Layer's width and height
 */
@JvmInline
value class TransformOriginCompat internal constructor(@PublishedApi internal val packedValue: Long) {

    /**
     * Return the position along the x-axis that should be used as the
     * origin for rotation and scale transformations. This is represented as a fraction
     * of the width of the content. A value of 0.5f represents the midpoint between the left
     * and right bounds of the content
     */
    val pivotFractionX: Float
        get() = unpackFloat1(packedValue)

    /**
     * Return the position along the y-axis that should be used as the
     * origin for rotation and scale transformations. This is represented as a fraction
     * of the height of the content. A value of 0.5f represents the midpoint between the top
     * and bottom bounds of the content
     */
    val pivotFractionY: Float
        get() = unpackFloat2(packedValue)

    @Suppress("NOTHING_TO_INLINE")
    inline operator fun component1(): Float = pivotFractionX

    @Suppress("NOTHING_TO_INLINE")
    inline operator fun component2(): Float = pivotFractionY

    /**
     * Returns a copy of this TransformOriginCompat instance optionally overriding the
     * pivotFractionX or pivotFractionY parameter
     */
    fun copy(
        pivotFractionX: Float = this.pivotFractionX,
        pivotFractionY: Float = this.pivotFractionY
    ) = TransformOriginCompat(pivotFractionX, pivotFractionY)

    override fun toString() =
        "TransformOriginCompat(${pivotFractionX.format(2)}, ${pivotFractionY.format(2)}))"

    companion object {
        val Center = TransformOriginCompat(pivotFractionX = 0.5f, pivotFractionY = 0.5f)
    }
}


fun TransformOriginCompat.toShortString(): String =
    "${pivotFractionX.format(2)}x${pivotFractionY.format(2)}"

private val transformOriginCompatTopStart =
    TransformOriginCompat(pivotFractionX = 0f, pivotFractionY = 0f)
val TransformOriginCompat.Companion.TopStart
    get() = transformOriginCompatTopStart

operator fun TransformOriginCompat.times(operand: Float) =
    TransformOriginCompat(pivotFractionX * operand, pivotFractionY * operand)

operator fun TransformOriginCompat.div(operand: Float) =
    TransformOriginCompat(pivotFractionX / operand, pivotFractionY / operand)

/**
 * Multiplication operator with [IntSizeCompat].
 *
 * Return a new [IntSizeCompat] with the width and height multiplied by the [TransformOriginCompat.pivotFractionX] and
 * [TransformOriginCompat.pivotFractionY] respectively
 */
operator fun IntSizeCompat.times(origin: TransformOriginCompat): IntSizeCompat =
    IntSizeCompat(
        width = (this.width * origin.pivotFractionX).roundToInt(),
        height = (this.height * origin.pivotFractionY).roundToInt()
    )

/**
 * Multiplication operator with [IntSizeCompat] with reverse parameter types to maintain
 * commutative properties of multiplication
 *
 * Return a new [IntSizeCompat] with the width and height multiplied by the [TransformOriginCompat.pivotFractionX] and
 * [TransformOriginCompat.pivotFractionY] respectively
 */
operator fun TransformOriginCompat.times(size: IntSizeCompat): IntSizeCompat = size * this

/**
 * Division operator with [IntSizeCompat]
 *
 * Return a new [IntSizeCompat] with the width and height divided by [TransformOriginCompat.pivotFractionX] and
 * [TransformOriginCompat.pivotFractionY] respectively
 */
operator fun IntSizeCompat.div(origin: TransformOriginCompat): IntSizeCompat =
    IntSizeCompat(
        width = (width / origin.pivotFractionX).roundToInt(),
        height = (height / origin.pivotFractionY).roundToInt()
    )

/**
 * Linearly interpolate between two [TransformOriginCompat] parameters
 *
 * The [fraction] argument represents position on the timeline, with 0.0 meaning
 * that the interpolation has not started, returning [start] (or something
 * equivalent to [start]), 1.0 meaning that the interpolation has finished,
 * returning [stop] (or something equivalent to [stop]), and values in between
 * meaning that the interpolation is at the relevant point on the timeline
 * between [start] and [stop]. The interpolation can be extrapolated beyond 0.0 and
 * 1.0, so negative values and values greater than 1.0 are valid (and can
 * easily be generated by curves).
 *
 * Values for [fraction] are usually obtained from an [Animation<Float>], such as
 * an `AnimationController`.
 */
fun lerp(
    start: TransformOriginCompat,
    stop: TransformOriginCompat,
    fraction: Float
): TransformOriginCompat {
    return TransformOriginCompat(
        pivotFractionX = lerp(start.pivotFractionX, stop.pivotFractionX, fraction),
        pivotFractionY = lerp(start.pivotFractionY, stop.pivotFractionY, fraction)
    )
}